
<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    html, body {
        height: 100%;  /* Use full height of the window */
        margin: 10px;  /* Remove default margin */
        display: flex;  /* Enable Flexbox */
        flex-direction: column;  /* Align children vertically */
        font-family: 'Open Sans', sans-serif;
        background-color: #A8D0E6;  /* Light blue background */
    }

    h1 {
        text-align: center;  /* Center the heading text horizontally */
        font-family: 'Open Sans', sans-serif;
        display: flex; /* Use Flexbox inside h1 */
    }
    p {
        font-family: 'Open Sans', sans-serif;
        color: black; /* Ensure text is readable on background */
        font-size: 20px;
        font-weight: bold;  /* Make text bold */
    }
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #tabs button {
        padding: 10px 15px;  /* Increase padding to make buttons larger */
        font-size: 14px;    /* Increase font size for better visibility */
        margin-left: 10px;  /* Add some space between the buttons */
        cursor: pointer;
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    #friends-list {
        position: absolute; 
        right: 10px;      /* Distance from the right side of the viewport */
        top: 12%;         /* Distance from the top of the viewport */
        width: 200px;     /* Fixed width */
        max-height: 80%;  /* Maximum height before scrolling */
        overflow-y: auto; /* Adds a vertical scrollbar when needed */
        border: 1px solid #ccc; /* Light grey border */
        background-color: #f9f9f9; /* Light background color */
        box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Adds shadow for depth */
        padding: 10px;    /* Padding inside the friends list */
        border-radius: 8px; /* Rounded corners */
        z-index: 1000;    /* Ensures it's on top of other elements */
    }

    #friends-list h2 {
        margin-top: 0;
        color: #333;
        text-align: center;
    }

    #friends-list ul {
        padding: 0;
        list-style-type: none; /* Removes bullet points */
    }

    #friends-list li {
        list-style-type: none; /* Removes bullet points */
        padding: 5px;
        margin-bottom: 5px;
        background-color: #e6e6e6; /* Slightly darker background for list items */
        border-radius: 4px; /* Rounded corners for list items */
    }

    #friends-list li a {
        list-style-type: none; /* Removes bullet points */
        text-decoration: none;
        color: #2a2a2a; /* Dark text color for readability */
        display: block;
    }

    #friends-list li a:hover {
        background-color: #d4d4d4; /* Hover effect */
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    nav button {
        font-family: 'Open Sans', sans-serif;
        padding: 5px 10px;
        background-color: white; 
        color: black;
        border: none;
        border-radius: 2px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin-right: 10px;  
        font-size: 15px;
        transition: background-color 0.3s, color 0.3s;
    }

    nav button:hover {
        background-color: #dddbcf; /* Darker blue on hover */
    }

    nav ul li.username {
        font-family: 'Open Sans', sans-serif;
        color: black;  /* Make the username color stand out */
        font-weight: bold;  /* Bold font for emphasis */
        margin-right: 10px; 
    }

</style>

<style>
    #friend_request_box {
        margin-top: 10px;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black; overflow: auto;">

    <div style="float: left;">
        <ul>
            <li class="username" style="display: inline-block;">Username: {{ username }}</li>
            {% if user_role == 'ADMIN'%}
                <li style="display: inline-block;"><button onclick="location.href='{{ url_for('admin_panel') }}'">Admin Panel</button></li>
            {% endif %}
        </ul>
    </div>
    <div style="float: right;">
        <ul>
            <li style="display: inline-block;"><button onclick="location.href='{{ url_for('home') }}'">Home</button></li>
            <li style="display: inline-block;"><button onclick="location.href='{{ url_for('user_profile', username=username) }}'">Profile</button></li>
            <li style="display: inline-block;"><button onclick="location.href='{{ url_for('friend_requests') }}'">Friend Requests</button></li>
            <li style="display: inline-block;"><button onclick="location.href='{{ url_for('knowledge_repository') }}'">Knowledge Repository</button></li>
            <button onclick="confirmLogout()">Log Out</button>
        
        </ul>
    </div>
</nav>


<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Section for sending friend requests -->
    <section id="friend_request_box">
        <p class="text">Send Friend Request to:</p>
        <input id="friend_username" placeholder="Username">
        <button onclick="sendFriendRequest()">Send Request</button>
    </section>

    <!-- Friends List -->
    <section id="friends-list">
        <h2>Friends</h2>
        <ul>
            {% if friends %}
                {% for friend, role in friends %}
                <li>
                    <a href="#" onclick="startPrivateConversation('{{ friend }}')">{{ friend }}</a>
                    <span>Role: {{ role }}</span>
                    <a href="#" onclick="removeFriend('{{ friend }}')">Remove friend</a>
                </li>
                {% endfor %}
            {% else %}
                <li>No friends yet.</li>
            {% endif %}
        </ul>
    </section>



</main>

<script src="/static/js/libs/socket.io.min.js"></script>

{# encrypt  #}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/pbkdf2.min.js"></script>


<script>
    

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })


    $(document).ready(function() {
        $.ajax({
            url: "/get-hashed-password/{{ username }}",
            type: "GET",
            success: function(response) {
                // Handle successful response
                console.log("Hashed Password:", response.hashed_password);
                let hashedPassword = response.hashed_password;

                // Call the send function with the hashed password
                //send(hashedPassword);
            },
            error: function(xhr, status, error) {
                // Handle error
                console.error("Error:", error);
            }
        });
    }); 


    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    let hashedpass = "{{ hashed_password }}";

    

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();


   

    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }
     
    
    function send() {
        let message = $("#message").val();
        $("#message").val("");
       if (!room_id) {
            alert("You must join a room before sending messages.");
            return;
       }
        
        socket.emit("send", username, message, room_id);  
    }


    socket.on("incoming", (message, color="black") => {
       add_message(message, color);
    });


    function removeFriend(friendUsername) {
        if (confirm(`Are you sure you want to remove ${friendUsername} from your friends list?`)) {
            fetch(`/remove-friend/${friendUsername}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: "{{ username }}" })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                alert(data.message); // Display whatever message the server sends back
                updateFriendsList(); // Update the list if the server indicates success, if needed
            })
            .catch((error) => {
                console.error('There has been a problem with your fetch operation:', error);
                alert('An error occurred.');
            });
        }
    }

    function startPrivateConversation(friendUsername) {
        socket.emit("join", username, friendUsername, (roomId) => {
            if (roomId !== null) {
                room_id = roomId;
                Cookies.set("room_id", room_id);
                $("#chat_box").hide();
                $("#input_box").show();
            } else {
                alert("Failed to start a private conversation.");
            }
        });
    }

    function sendPrivateMessage() {
        let message = $("#message").val();
        //let encryptedMessage = encryptMessage(message);
        $("#message").val("");
        socket.emit("private_message", username, message, room_id);  
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Function to send a friend request
    function sendFriendRequest() {
        const friendUsername = document.getElementById('friend_username').value;
        // Validate username on the client side
        if (!isValidUsername(friendUsername)) {
            alert("Invalid username. Please use only alphanumeric characters and underscores, and ensure it is less than 30 characters long.");
            return; // Stop the function if the username is invalid
        }

        fetch('/send-friend-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sender: "{{ username }}", receiver: friendUsername })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(data => {
            alert(data);
            document.getElementById('friend_username').value = ''; // Clear the input field
        })
        .catch((error) => {
            console.error('There has been a problem with your fetch operation:', error);
        });
    }

    function isValidUsername(username) {
        const regex = /^\w{1,30}$/;
        return regex.test(username);
    }

    //function to accept or decline friend request
    function handleFriendRequest(action, requestId) {
    fetch(`/${action}-friend-request/${requestId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        },
        body: JSON.stringify({ username: "{{ username }}" }) 
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();  // Assuming the server responds with JSON
    })
    .then(data => {
        alert(data.message);  // Assuming the server responds with a JSON object that contains a message key
    })
    .catch((error) => {
        console.error('There has been a problem with your fetch operation:', error);
        alert('An error occurred.');
    });
}
    
</script>
<script>
    function confirmLogout() {
        if (confirm('Are you sure you want to log out?')) {
            location.href = '{{ url_for('logout') }}';
        }
    }
    // Function to fetch and update the friends list
    function updateFriendsList() {
        fetch('/api/friends-list')
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error fetching friends:', data.error);
                return;
            }
            const list = document.getElementById('friends-list');
            list.innerHTML = '<h2>Friends</h2><ul>';
            if (data.friends && data.friends.length > 0) {
                data.friends.forEach(friend => {
                    const list_part = document.createElement('li');
                    // updating remove friend every five seconds as well 
                    list_part.innerHTML = `<a href="#" onclick="startPrivateConversation('${friend[0]}')">${friend[0]}</a>
                                                     <span>Role: ${friend[1]}</span>
                                        <a href="#" onclick="removeFriend('${friend[0]}')">Remove friend</a>`;
                    list.appendChild(list_part);
                });
            } else {
                list.innerHTML += '<li>No friends yet.</li>';
            }
            list.innerHTML += '</ul>';
        })
        .catch(error => console.error('Error fetching friends:', error));
    }
    // Call updateFriendsList every 5 seconds
    setInterval(updateFriendsList, 5000);
</script>

{% endblock %}