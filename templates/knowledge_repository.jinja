{% extends 'base.jinja' %}

{% block content %}
<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        font-family: 'Open Sans', sans-serif;
        background-color: #A8D0E6;
    }
    
    nav {
        position: absolute;
        width: 100%;
        height: 60px; /* Fixed height */
        background-color: beige;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 20px; /* Consistent padding */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
        overflow: hidden; /* Prevents overflow */
    }

    h2{
        font-family: 'Open Sans', sans-serif;
    }

    h3{
        font-family: 'Open Sans', sans-serif;
        color: black; /* Ensure text is readable on background */
        font-size: 18px;
        margin: 8px 0;
    }

    p {
        font-family: 'Open Sans', sans-serif;
        color: black; /* Ensure text is readable on background */
        font-size: 14px;
        
    }
    
    .container {
        margin-top: 60px;
        display: flex;
        justify-content: space-between;
        padding: 10px;
    }

    .sidebar {
        overflow: auto;
        width: 30%;
        border-right: 2px solid #eee;
        padding-right: 20px;
    }

    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .article-preview {
        cursor: pointer;
        padding: 1px;
        border-bottom: 1px solid #eee;
        height: 80px; /* Fixed height for each preview */
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Helps distribute space between elements */
        overflow: hidden; /* Ensures no content spills over */
        background: #fff; /* Optional: background color for better readability */
        margin-bottom: 2px; /* Space between articles */
        padding-left: 5px;  /* Adds padding on the left for better text alignment */

    }

    .article-preview h3 {
        margin-top: 2px;
        font-size: 16px; /* Size for titles */
        overflow: hidden;
        text-overflow: ellipsis; /* Ellipsis for overflowed text */
        margin-bottom: 0px; /* Space between title and content */
        white-space: nowrap;  /* Ensures text stays in a single line */
        padding-left: 5px;  /* Adds padding on the left for better text alignment */
    }

    .article-preview p {
        margin-top: 0px;
        line-height: 1.2;  /* Reduced line height to save space */
        font-size: 14px; /* Consistent font size for preview text */
        cursor: pointer;
        border-bottom: 0px solid #eee;
        overflow: hidden;
        text-overflow: ellipsis;
        padding-left: 5px;  /* Adds padding on the left for better text alignment */
        padding-right: 5px;  /* Adds padding on the left for better text alignment */
    
    }

    .article-preview:hover {
        background-color: #f9f9f9;
    }
    .main-content {
        width: 65%;
        padding-left: 20px;
    }
    .comments {
        margin-top: 10px;
        background-color: #f0f0f0;
        padding: 10px;
        overflow-y: auto;  // Enable vertical scrolling
    }
    .comment {
        margin-bottom: 10px;
    }
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }
    .modal-content {
        background-color: white;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 50%; /* Could be more or less, depending on screen size */
    }
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }
    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    #tabs button {
        padding: 10px 15px;  /* Increase padding to make buttons larger */
        font-size: 14px;    /* Increase font size for better visibility */
        margin-left: 10px;  /* Add some space between the buttons */
        cursor: pointer;
    }

    nav button {
        font-family: 'Open Sans', sans-serif;
        padding: 5px 10px;
        background-color: white; 
        color: black;
        border: none;
        border-radius: 2px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        margin-right: 10px;  
        font-size: 15px;
        transition: background-color 0.3s, color 0.3s;
    }

    nav button:hover {
        background-color: #dddbcf; /* Darker blue on hover */
    }

    .new-article {
        padding: 8px 16px;  /* Increase padding for a larger button */
        background-color: #F76C6c; /* Green background color */
        color: white; /* White text color */
        border: none;  /* Remove border */
        cursor: pointer; /* Cursor indicates clickable */
        font-size: 18px; /* Appropriate font size */
        font-weight: bold; /* Bold text */
        transition: background-color 0.2s; /* Smooth transition for hover effect */
    }

    .new-article:hover {
        background-color: #ab4f4f; /* Slightly darker green on hover */
    }

    form {
        width: 100%; /* Ensures form occupies all horizontal space of its parent */
        display: flex;
        flex-direction: column;
        align-items: left; /* Center-aligns form items */
    }

    form input[type="text"] {
        margin-top: 10px;
        width: 90%;
        padding: 10px; /* Padding for better text visibility and click area */
        height: 40px; /* Fixed height for input */
    }

    form textarea {
        margin-top: 10px;
        width: 90%;
        padding: 10px; /* Padding for better text visibility and ease of typing */
        height: 150px; /* Increased height for textarea */
    }

    /* Optional: Add space at the bottom of the last element */
    form button {
        margin-top: 10px;
        margin-bottom: 10px;
        width: 20%; /* Adjust width as necessary */
    }

    .button {
        margin-top: 10px;
        padding: 5px 10px;
        background-color: white; /* Green background for visibility */
        color: black; /* White text for contrast */
        border: none;
        cursor: pointer; /* Cursor indicates it's clickable */
        font-size: 14px; /* Appropriately sized font */
        transition: background-color 0.3s, box-shadow 0.3s; /* Smooth transitions for hover effects */
    }

    .button:hover {
        background-color: rgb(205, 205, 205); /* Darker shade of green on hover */
        box-shadow: 0 2px 5px rgba(0,0,0,0.2); /* Subtle shadow for 3D effect */
    }

    .comment p {
        font-size: 14px; /* Default font size for the entire paragraph */
        color: black; /* Default text color */
    }

    .comment .comment-role {
        font-size: 12px; /* Smaller font size for roles */
        color: grey; /* Grey color for less emphasis */
    }

    .comment .comment-author {
        font-size: 14px; /* Same as the default to keep it consistent */
        font-weight: bold; /* Make the author name bold */
    }

    .comment .comment-content {
        font-size: 14px; /* Same as the default to keep it consistent */
    }


</style>
<nav style="padding: 2px 0; overflow: auto;">

    <div style="float: left;">
        <ul>
            <li class="username" style="display: inline-block;">Logged in as {{ username }}</li>
        </ul>
    </div>
        <div style="text-align: center; position: absolute; left: 50%; transform: translateX(-50%);">
        <h1 style="margin: 0; font-size: 30px; color: #F76C6c; ">Knowledge Repository</h1>
    </div>
    <div style="float: right;">
        <ul>
            <li style="display: inline-block;"><button onclick="location.href='{{ url_for('home') }}'">Home</button></li>
            <button onclick="confirmLogout()">Log Out</button>
        
        </ul>
    </div>
</nav>
<div class="container">
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Articles</h2>
            <button class="new-article" id="newArticleBtn">New Article</button>
        </div>
        {% for article in articles %}
            <div class="article-preview" onclick="location.href='{{ url_for('knowledge_repository', article_id=article.id) }}'">
                <h3 id="sidebar-title-{{ article.id }}">{{ article.title }}</h3>
                <p id="sidebar-content-{{ article.id }}" style="font-size: 14px; color: black; margin: 1px 0;">{{ article.content.split()[:10]|join(' ') }}...</p>
                <!-- Author name in smaller font -->
                <p style="font-size: 14px; color: rgb(124, 124, 124);margin: 1px 0;">{{ article.author_id }}</p>
            </div>
        {% endfor %}
        </div>
        <div class="main-content">
            {% if selected_article %}
            <h1 id="article-title-{{ selected_article.id }}">{{ selected_article.title }}</h1>
            <p id="article-content-{{ selected_article.id }}" style="font-size: 20px; color: black; ; margin: 1px 0;">{{ selected_article.content }}</p>
            <p style="font-size: 14px; color: rgb(124, 124, 124); ; margin: 1px 0;">Author: {{ selected_article.author_id }}, Role: {{ author_role }}</p>
            {% if user_role == 'ADMIN' or user_role == 'ACADEMIC' or user_role == 'ADMINISTRATIVE' %}
                <!-- Delete button for admin roles -->
                <button class="button" onclick="deleteArticle({{ selected_article.id }}); event.stopPropagation();" style="vertical-align: top;">
                    Delete
                </button>
            {% endif %}
            {% if username == selected_article.author_id or user_role == 'ADMIN' or user_role == 'ACADEMIC' or user_role == 'ADMINISTRATIVE' %}
                <button class="button" id="edit-button-{{ selected_article.id }}" onclick="enableEditing({{ selected_article.id }})">Edit</button>
            {% endif %}
            <div class="comments">
            <h3>Comments</h3>
            {% for comment in comments %}
                <div class="comment">
                    <p>
                    <span class="comment-role">({{ comment.author_role.value }})</span>
                    <span class="comment-author">{{ comment.author_id }}:</span>
                    <span class="comment-content">{{ comment.content }}</span>
                    </p>
                    {% if user_role == 'ADMIN' or user_role == 'ACADEMIC' or user_role == 'ADMINISTRATIVE'%}
                        <!-- Button to delete a comment -->
                        <button onclick="deleteComment({{ comment.id }})" class="button delete-button">Delete</button>
                    {% endif %}
                </div>
                {% else %}
                <p>No comments yet.</p>
                {% endfor %}
            </div>

            <div class="comments">
                <form id="comment-form" data-article-id="{{ selected_article.id }}">
                    <input type="text" name="content" placeholder="Add a comment..." required>
                    <button type="submit">Comment</button>
                </form>

            </div>
            {% endif %}
        </div>
    </div>
    
    <!-- The Modal -->
    <div id="newArticleModal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <form id="add-article-form" style="margin-top: 20px;">
                <input type="text" name="title" placeholder="Article Title" required>
                <textarea name="content" placeholder="Write something..." required></textarea>
                <button type="submit">Post</button>
            </form>
        </div>
    </div>
    
</div>


<script>
    function confirmLogout() {
        if (confirm('Are you sure you want to log out?')) {
            location.href = '{{ url_for('logout') }}';
        }
    }
    // Get the modal
    var modal = document.getElementById('newArticleModal');

    // Get the button that opens the modal
    var btn = document.getElementById('newArticleBtn');

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal 
    btn.onclick = function() {
        modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.edit-button').forEach(button => {
            button.addEventListener('click', function() {
                const articleId = this.dataset.articleId;
                enableEditing(articleId);
            });
        });
    });


    function enableEditing(articleId) {
        const titleElement = document.getElementById(`article-title-${articleId}`);
        const contentElement = document.getElementById(`article-content-${articleId}`);
        const editButton = document.getElementById(`edit-button-${articleId}`);

        const title = titleElement.innerText;
        const content = contentElement.innerText;

        titleElement.innerHTML = `<input type='text' id='edit-title-${articleId}' value='${title}' style='width: 100%;'>`;
        contentElement.innerHTML = `<textarea id='edit-content-${articleId}' style='width: 100%; height: 100px;'>${content}</textarea>`;

        editButton.innerText = 'Save';
        editButton.setAttribute('onclick', `saveEdits(${articleId})`);
    }

    function saveEdits(articleId) {
        const editedTitle = document.getElementById(`edit-title-${articleId}`).value;
        const editedContent = document.getElementById(`edit-content-${articleId}`).value;
        const editButton = document.getElementById(`edit-button-${articleId}`);

        // Assuming you have an API endpoint to handle POST requests
        fetch(`/save-article/${articleId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: editedTitle, content: editedContent })
        })
        .then(response => {
            if (response.ok) {
                document.getElementById(`article-title-${articleId}`).innerText = editedTitle;
                document.getElementById(`article-content-${articleId}`).innerText = editedContent;
                editButton.innerText = 'Edit';
                editButton.setAttribute('onclick', `enableEditing(${articleId})`);
                 // Update the sidebar title and content snippet
                const sidebarTitleElement = document.getElementById(`sidebar-title-${articleId}`);
                const sidebarContentElement = document.getElementById(`sidebar-content-${articleId}`);
                if (sidebarTitleElement) {
                    sidebarTitleElement.innerText = editedTitle;
                }
                if (sidebarContentElement) {
                    // Update with the first 30 words of the new content
                    sidebarContentElement.innerText = editedContent.split(' ').slice(0, 30).join(' ') + '...';
                }
            }
        })
        .catch(error => console.error('Failed to save the article:', error));
    }

    function deleteArticle(articleId) {
        if (confirm('Are you sure you want to delete this article?')) {
            fetch(`/delete-article/${articleId}`, { method: 'DELETE' })
                .then(response => {
                    if (response.ok) {
                        alert('Article deleted successfully.');
                        location.reload(); // Optionally reload the page or remove the article element from the DOM
                    } else {
                        throw new Error('Failed to delete the article.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to delete the article. Please try again.');
                });
        }
    }

    function deleteComment(commentId) {
        if (confirm('Are you sure you want to delete this comment?')) {
            fetch(`/delete-comment/${commentId}`, { method: 'POST' })
            .then(response => {
                if (response.ok) {
                    alert('Comment deleted successfully.');
                    location.reload(); // Reload the page to update the comment section
                } else {
                    throw new Error('Failed to delete the comment.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to delete the comment. Please try again.');
            });
        }
    }

    document.getElementById('add-article-form').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission behavior
        const formData = new FormData(this);

        fetch('/add-article', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title: formData.get('title'),
                content: formData.get('content')
            })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message); // Display the message from the server
            if (data.success) {
                // Optionally clear the form or update the UI
                this.reset();
                modal.style.display = "none"; // Assuming you have a modal that needs to be closed
                location.reload(); 
                
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while adding the article.');
        });
    });

    document.querySelector('#comment-form').addEventListener('submit', function(event) {
        event.preventDefault();  // Prevent the default form submission
        const formData = new FormData(this);

        fetch(`/add-comment/${this.dataset.articleId}`, {  // Use the article ID embedded in the form
            method: 'POST',
            body: formData  // Send the form data
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);  // Alert the message from the server
            if (data.success) {
                // If comment is successfully added, update the comment section dynamically
                location.reload();
                this.reset();  // Reset the form after successful submission
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to submit the comment.');
        });
    });



</script>
{% endblock %}
